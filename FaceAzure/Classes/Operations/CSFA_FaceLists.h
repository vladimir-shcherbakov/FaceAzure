/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

#import <AzureClientRuntime/AzureClientRuntime.h>
#import "CSFA_FaceList.h"
#import "CSFA_PersistedFace.h"
@class AZOperationError;

/**
 * An protocol provides access to all CSFA_FaceLists operations
 */
@protocol CSFA_FaceListsProtocol

/**
 * Create an empty face list. Up to 64 face lists are allowed to exist in one subscription.
 *
 * @param faceListId Id referencing a particular face list.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)createWithFaceListId:(NSString *)faceListId withCallback:(void(^)(AZOperationError*))callback;

/**
 * Create an empty face list. Up to 64 face lists are allowed to exist in one subscription.
 *
 * @param faceListId Id referencing a particular face list.
 * @param name User defined name, maximum length is 128.
 * @param userData User specified data. Length should not exceed 16KB.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)createWithFaceListId:(NSString *)faceListId withName:(NSString *)name withUserData:(NSString *)userData withCallback:(void(^)(AZOperationError*))callback;

/**
 * Retrieve a face list's information.
 *
 * @param faceListId Id referencing a particular face list.
 * @param callback A block where CSFA_FaceList is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)getWithFaceListId:(NSString *)faceListId withCallback:(void(^)(CSFA_FaceList*, AZOperationError*))callback;

/**
 * Update information of a face list.
 *
 * @param faceListId Id referencing a particular face list.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)updateWithFaceListId:(NSString *)faceListId withCallback:(void(^)(AZOperationError*))callback;

/**
 * Update information of a face list.
 *
 * @param faceListId Id referencing a particular face list.
 * @param name User defined name, maximum length is 128.
 * @param userData User specified data. Length should not exceed 16KB.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)updateWithFaceListId:(NSString *)faceListId withName:(NSString *)name withUserData:(NSString *)userData withCallback:(void(^)(AZOperationError*))callback;

/**
 * Delete an existing face list according to faceListId. Persisted face images in the face list will also be deleted.
 *
 * @param faceListId Id referencing a particular face list.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)deleteWithFaceListId:(NSString *)faceListId withCallback:(void(^)(AZOperationError*))callback;

/**
 * Retrieve information about all existing face lists. Only faceListId, name and userData will be returned.
 *
 * @param callback A block where NSArray<CSFA_FaceList*> is a result object and AZOperationError is nil, if the operation is successful
 */
- (void)listWithCallback:(void(^)(NSArray<CSFA_FaceList*>*, AZOperationError*))callback;

/**
 * Delete an existing face from a face list (given by a persisitedFaceId and a faceListId). Persisted image related to the face will also be deleted.
 *
 * @param faceListId Id referencing a particular face list.
 * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)deleteFaceWithFaceListId:(NSString *)faceListId withPersistedFaceId:(NSUUID *)persistedFaceId withCallback:(void(^)(AZOperationError*))callback;

/**
 * Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
 *
 * @param faceListId Id referencing a particular face list.
 * @param url Publicly reachable URL of an image
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)addFaceFromUrlWithFaceListId:(NSString *)faceListId withUrl:(NSString *)url withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback;

/**
 * Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
 *
 * @param faceListId Id referencing a particular face list.
 * @param url Publicly reachable URL of an image
 * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
 * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)addFaceFromUrlWithFaceListId:(NSString *)faceListId withUrl:(NSString *)url withUserData:(NSString *)userData withTargetFace:(NSArray<AZInteger*> *)targetFace withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback;

/**
 * Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
 *
 * @param faceListId Id referencing a particular face list.
 * @param image An image stream.
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)addFaceFromStreamWithFaceListId:(NSString *)faceListId withImage:(AZStream *)image withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback;

/**
 * Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
 *
 * @param faceListId Id referencing a particular face list.
 * @param image An image stream.
 * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
 * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)addFaceFromStreamWithFaceListId:(NSString *)faceListId withImage:(AZStream *)image withUserData:(NSString *)userData withTargetFace:(NSArray<AZInteger*> *)targetFace withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback;

@end

/**
* The protocol implementation
*/
@class CSFA_FaceClientService;

@interface CSFA_FaceLists : NSObject <CSFA_FaceListsProtocol>
@property (readonly) CSFA_FaceClientService *service;
- (instancetype)initWithService:(CSFA_FaceClientService *)service;
@end
