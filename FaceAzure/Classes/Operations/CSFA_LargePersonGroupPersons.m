/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

#import <AzureClientRuntime/AzureClientRuntime.h>
#import "CSFA_LargePersonGroupPersons.h"
#import "CSFA_APIError.h"
#import "CSFA_FaceClientService.h"
#import "CSFA_APIError.h"
#import "CSFA_ImageUrl.h"
#import "CSFA_NameAndUserDataContract.h"
#import "CSFA_UpdateFaceRequest.h"

/**
 * The protocol CSFA_LargePersonGroupPersonsProtocol implementation
 */
@implementation CSFA_LargePersonGroupPersons

- (instancetype)initWithService:(CSFA_FaceClientService *)service {
    if (self = [super init]) {
        _service = service;
    }

    return self;
}

/**
 * Create a new person in a specified large person group.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where CSFA_Person is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)createWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(CSFA_Person*, AZOperationError*))callback {
    NSString* name = nil;
    NSString* userData = nil;
    [self createWithLargePersonGroupId:largePersonGroupId withName:name withUserData:userData withCallback:callback];
}

/**
 * Create a new person in a specified large person group.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param name User defined name, maximum length is 128.
 * @param userData User specified data. Length should not exceed 16KB.
 * @param callback A block where CSFA_Person is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)createWithLargePersonGroupId:(NSString *)largePersonGroupId withName:(NSString *)name withUserData:(NSString *)userData withCallback:(void(^)(CSFA_Person*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (name != nil) {
        if (name.length > 128) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'name' failed rule validation, rule name: 'MaxLength', constrain value: 128"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 16384) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 16384"
                userInfo: nil];
        }
    }
    CSFA_NameAndUserDataContract *body = [CSFA_NameAndUserDataContract new];
    if (name != nil || userData != nil) {
        body.name = name;
        body.userData = userData;
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/persons"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"POST"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:[AZJsonCoder encodeObject:body]];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_Person class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where NSArray<CSFA_Person*> is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)listWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(NSArray<CSFA_Person*>*, AZOperationError*))callback {
    NSString* start = nil;
    AZInteger* top = nil;
    [self listWithLargePersonGroupId:largePersonGroupId withStart:start withTop:top withCallback:callback];
}

/**
 * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param start Starting person id to return (used to list a range of persons).
 * @param top Number of persons to return starting with the person id indicated by the 'start' parameter.
 * @param callback A block where NSArray<CSFA_Person*> is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)listWithLargePersonGroupId:(NSString *)largePersonGroupId withStart:(NSString *)start withTop:(AZInteger *)top withCallback:(void(^)(NSArray<CSFA_Person*>*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (top != nil) {
        if ([top intValue] > 1000) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'top' failed rule validation, rule name: 'InclusiveMaximum', constrain value: 1000"
                userInfo: nil];
        }
        if ([top intValue] < 1) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'top' failed rule validation, rule name: 'InclusiveMinimum', constrain value: 1"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/persons"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId}
                                withQueryParams:@{@"start":AZ_NULLABLE(start),@"top":AZ_NULLABLE(top)}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"GET"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[NSArray<CSFA_Person*> class]
                   withElementClass:[CSFA_Person class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * Delete an existing person from a large person group. All stored person data, and face features in the person entry will be deleted.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)deleteWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (personId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'personId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/persons/{personId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId,@"{personId}":personId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"DELETE"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Retrieve a person's information, including registered persisted faces, name and userData.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param callback A block where CSFA_Person is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)getWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withCallback:(void(^)(CSFA_Person*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (personId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'personId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/persons/{personId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId,@"{personId}":personId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"GET"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_Person class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * Update name or userData of a person.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)updateWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withCallback:(void(^)(AZOperationError*))callback {
    NSString* name = nil;
    NSString* userData = nil;
    [self updateWithLargePersonGroupId:largePersonGroupId withPersonId:personId withName:name withUserData:userData withCallback:callback];
}

/**
 * Update name or userData of a person.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param name User defined name, maximum length is 128.
 * @param userData User specified data. Length should not exceed 16KB.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)updateWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withName:(NSString *)name withUserData:(NSString *)userData withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (personId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'personId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (name != nil) {
        if (name.length > 128) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'name' failed rule validation, rule name: 'MaxLength', constrain value: 128"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 16384) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 16384"
                userInfo: nil];
        }
    }
    CSFA_NameAndUserDataContract *body = [CSFA_NameAndUserDataContract new];
    if (name != nil || userData != nil) {
        body.name = name;
        body.userData = userData;
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/persons/{personId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId,@"{personId}":personId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"PATCH"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:[AZJsonCoder encodeObject:body]];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Delete a face from a person. Relative feature for the persisted face will also be deleted.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)deleteFaceWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withPersistedFaceId:(NSUUID *)persistedFaceId withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (personId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'personId' is required and cannot be nil."
            userInfo: nil];
    }
    if (persistedFaceId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'persistedFaceId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId,@"{personId}":personId,@"{persistedFaceId}":persistedFaceId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"DELETE"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging largePersonGroupId).
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)getFaceWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withPersistedFaceId:(NSUUID *)persistedFaceId withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (personId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'personId' is required and cannot be nil."
            userInfo: nil];
    }
    if (persistedFaceId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'persistedFaceId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId,@"{personId}":personId,@"{persistedFaceId}":persistedFaceId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"GET"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_PersistedFace class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * Update a person persisted face's userData field.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)updateFaceWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withPersistedFaceId:(NSUUID *)persistedFaceId withCallback:(void(^)(AZOperationError*))callback {
    NSString* userData = nil;
    [self updateFaceWithLargePersonGroupId:largePersonGroupId withPersonId:personId withPersistedFaceId:persistedFaceId withUserData:userData withCallback:callback];
}

/**
 * Update a person persisted face's userData field.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
 * @param userData User-provided data attached to the face. The size limit is 1KB.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)updateFaceWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withPersistedFaceId:(NSUUID *)persistedFaceId withUserData:(NSString *)userData withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (personId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'personId' is required and cannot be nil."
            userInfo: nil];
    }
    if (persistedFaceId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'persistedFaceId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 1024) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 1024"
                userInfo: nil];
        }
    }
    CSFA_UpdateFaceRequest *body = [CSFA_UpdateFaceRequest new];
    if (userData != nil) {
        body.userData = userData;
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId,@"{personId}":personId,@"{persistedFaceId}":persistedFaceId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"PATCH"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:[AZJsonCoder encodeObject:body]];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param url Publicly reachable URL of an image
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)addFaceFromUrlWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withUrl:(NSString *)url withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback {
    NSString* userData = nil;
    NSArray<AZInteger*>* targetFace = nil;
    [self addFaceFromUrlWithLargePersonGroupId:largePersonGroupId withPersonId:personId withUrl:url withUserData:userData withTargetFace:targetFace withCallback:callback];
}

/**
 * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param url Publicly reachable URL of an image
 * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
 * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)addFaceFromUrlWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withUrl:(NSString *)url withUserData:(NSString *)userData withTargetFace:(NSArray<AZInteger*> *)targetFace withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (personId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'personId' is required and cannot be nil."
            userInfo: nil];
    }
    if (url == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'url' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 1024) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 1024"
                userInfo: nil];
        }
    }
    CSFA_ImageUrl *imageUrl = [CSFA_ImageUrl new];
    imageUrl.url = url;
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId,@"{personId}":personId}
                                withQueryParams:@{@"userData":AZ_NULLABLE(userData),@"targetFace":AZ_NULLABLE(targetFace)}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"POST"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:[AZJsonCoder encodeObject:imageUrl]];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_PersistedFace class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param image An image stream.
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)addFaceFromStreamWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withImage:(AZStream *)image withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback {
    NSString* userData = nil;
    NSArray<AZInteger*>* targetFace = nil;
    [self addFaceFromStreamWithLargePersonGroupId:largePersonGroupId withPersonId:personId withImage:image withUserData:userData withTargetFace:targetFace withCallback:callback];
}

/**
 * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param personId Id referencing a particular person.
 * @param image An image stream.
 * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
 * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)addFaceFromStreamWithLargePersonGroupId:(NSString *)largePersonGroupId withPersonId:(NSUUID *)personId withImage:(AZStream *)image withUserData:(NSString *)userData withTargetFace:(NSArray<AZInteger*> *)targetFace withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (personId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'personId' is required and cannot be nil."
            userInfo: nil];
    }
    if (image == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'image' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 1024) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 1024"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId,@"{personId}":personId}
                                withQueryParams:@{@"userData":AZ_NULLABLE(userData),@"targetFace":AZ_NULLABLE(targetFace)}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"POST"
                                                       withHeaders:@{@"Content-Type":@"application/octet-stream"}
                                                          withBody:image];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_PersistedFace class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

@end
