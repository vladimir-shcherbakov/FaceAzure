/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

#import <AzureClientRuntime/AzureClientRuntime.h>
#import "CSFA_LargePersonGroup.h"
#import "CSFA_TrainingStatus.h"
@class AZOperationError;

/**
 * An protocol provides access to all CSFA_LargePersonGroups operations
 */
@protocol CSFA_LargePersonGroupsProtocol

/**
 * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)createWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(AZOperationError*))callback;

/**
 * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param name User defined name, maximum length is 128.
 * @param userData User specified data. Length should not exceed 16KB.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)createWithLargePersonGroupId:(NSString *)largePersonGroupId withName:(NSString *)name withUserData:(NSString *)userData withCallback:(void(^)(AZOperationError*))callback;

/**
 * Delete an existing large person group. Persisted face features of all people in the large person group will also be deleted.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)deleteWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(AZOperationError*))callback;

/**
 * Retrieve the information of a large person group, including its name and userData.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where CSFA_LargePersonGroup is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)getWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(CSFA_LargePersonGroup*, AZOperationError*))callback;

/**
 * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)updateWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(AZOperationError*))callback;

/**
 * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param name User defined name, maximum length is 128.
 * @param userData User specified data. Length should not exceed 16KB.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)updateWithLargePersonGroupId:(NSString *)largePersonGroupId withName:(NSString *)name withUserData:(NSString *)userData withCallback:(void(^)(AZOperationError*))callback;

/**
 * Retrieve the training status of a large person group (completed or ongoing).
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where CSFA_TrainingStatus is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)getTrainingStatusWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(CSFA_TrainingStatus*, AZOperationError*))callback;

/**
 * List large person groups and their information.
 *
 * @param callback A block where NSArray<CSFA_LargePersonGroup*> is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)listWithCallback:(void(^)(NSArray<CSFA_LargePersonGroup*>*, AZOperationError*))callback;

/**
 * List large person groups and their information.
 *
 * @param start List large person groups from the least largePersonGroupId greater than the "start".
 * @param top The number of large person groups to list.
 * @param callback A block where NSArray<CSFA_LargePersonGroup*> is a result object and AZOperationError is nil, if the operation is successful
 */
- (void)listWithStart:(NSString *)start withTop:(AZInteger *)top withCallback:(void(^)(NSArray<CSFA_LargePersonGroup*>*, AZOperationError*))callback;

/**
 * Queue a large person group training task, the training task may not be started immediately.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a required parameter is not provided.
 */
- (void)trainWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(AZOperationError*))callback;

@end

/**
* The protocol implementation
*/
@class CSFA_FaceClientService;

@interface CSFA_LargePersonGroups : NSObject <CSFA_LargePersonGroupsProtocol>
@property (readonly) CSFA_FaceClientService *service;
- (instancetype)initWithService:(CSFA_FaceClientService *)service;
@end
