/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

#import <AzureClientRuntime/AzureClientRuntime.h>
#import "CSFA_LargePersonGroups.h"
#import "CSFA_APIError.h"
#import "CSFA_FaceClientService.h"
#import "CSFA_APIError.h"
#import "CSFA_NameAndUserDataContract.h"

/**
 * The protocol CSFA_LargePersonGroupsProtocol implementation
 */
@implementation CSFA_LargePersonGroups

- (instancetype)initWithService:(CSFA_FaceClientService *)service {
    if (self = [super init]) {
        _service = service;
    }

    return self;
}

/**
 * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)createWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(AZOperationError*))callback {
    NSString* name = nil;
    NSString* userData = nil;
    [self createWithLargePersonGroupId:largePersonGroupId withName:name withUserData:userData withCallback:callback];
}

/**
 * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param name User defined name, maximum length is 128.
 * @param userData User specified data. Length should not exceed 16KB.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)createWithLargePersonGroupId:(NSString *)largePersonGroupId withName:(NSString *)name withUserData:(NSString *)userData withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (name != nil) {
        if (name.length > 128) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'name' failed rule validation, rule name: 'MaxLength', constrain value: 128"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 16384) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 16384"
                userInfo: nil];
        }
    }
    CSFA_NameAndUserDataContract *body = [CSFA_NameAndUserDataContract new];
    if (name != nil || userData != nil) {
        body.name = name;
        body.userData = userData;
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"PUT"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:[AZJsonCoder encodeObject:body]];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Delete an existing large person group. Persisted face features of all people in the large person group will also be deleted.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)deleteWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"DELETE"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Retrieve the information of a large person group, including its name and userData.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where CSFA_LargePersonGroup is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)getWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(CSFA_LargePersonGroup*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"GET"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_LargePersonGroup class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)updateWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(AZOperationError*))callback {
    NSString* name = nil;
    NSString* userData = nil;
    [self updateWithLargePersonGroupId:largePersonGroupId withName:name withUserData:userData withCallback:callback];
}

/**
 * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param name User defined name, maximum length is 128.
 * @param userData User specified data. Length should not exceed 16KB.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)updateWithLargePersonGroupId:(NSString *)largePersonGroupId withName:(NSString *)name withUserData:(NSString *)userData withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (name != nil) {
        if (name.length > 128) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'name' failed rule validation, rule name: 'MaxLength', constrain value: 128"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 16384) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 16384"
                userInfo: nil];
        }
    }
    CSFA_NameAndUserDataContract *body = [CSFA_NameAndUserDataContract new];
    if (name != nil || userData != nil) {
        body.name = name;
        body.userData = userData;
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"PATCH"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:[AZJsonCoder encodeObject:body]];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Retrieve the training status of a large person group (completed or ongoing).
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where CSFA_TrainingStatus is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)getTrainingStatusWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(CSFA_TrainingStatus*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/training"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"GET"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_TrainingStatus class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * List large person groups and their information.
 *
 * @param callback A block where NSArray<CSFA_LargePersonGroup*> is a result object and AZOperationError is nil, if the operation is successful
 */
- (void)listWithCallback:(void(^)(NSArray<CSFA_LargePersonGroup*>*, AZOperationError*))callback {
    NSString* start = nil;
    AZInteger* top = @1000;
    [self listWithStart:start withTop:top withCallback:callback];
}

/**
 * List large person groups and their information.
 *
 * @param start List large person groups from the least largePersonGroupId greater than the "start".
 * @param top The number of large person groups to list.
 * @param callback A block where NSArray<CSFA_LargePersonGroup*> is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)listWithStart:(NSString *)start withTop:(AZInteger *)top withCallback:(void(^)(NSArray<CSFA_LargePersonGroup*>*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (start != nil) {
        if (start.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'start' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
    }
    if (top != nil) {
        if ([top intValue] > 1000) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'top' failed rule validation, rule name: 'InclusiveMaximum', constrain value: 1000"
                userInfo: nil];
        }
        if ([top intValue] < 1) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'top' failed rule validation, rule name: 'InclusiveMinimum', constrain value: 1"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint}
                                withQueryParams:@{@"start":AZ_NULLABLE(start),@"top":AZ_NULLABLE(top)}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"GET"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[NSArray<CSFA_LargePersonGroup*> class]
                   withElementClass:[CSFA_LargePersonGroup class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * Queue a large person group training task, the training task may not be started immediately.
 *
 * @param largePersonGroupId Id referencing a particular large person group.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)trainWithLargePersonGroupId:(NSString *)largePersonGroupId withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largePersonGroupId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largePersonGroupId != nil) {
        if (largePersonGroupId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largePersonGroupId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largePersonGroupId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largepersongroups/{largePersonGroupId}/train"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largePersonGroupId}":largePersonGroupId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"POST"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

@end
