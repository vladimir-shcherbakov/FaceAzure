/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

#import <AzureClientRuntime/AzureClientRuntime.h>
#import "CSFA_LargeFaceLists.h"
#import "CSFA_APIError.h"
#import "CSFA_FaceClientService.h"
#import "CSFA_APIError.h"
#import "CSFA_ImageUrl.h"
#import "CSFA_NameAndUserDataContract.h"
#import "CSFA_UpdateFaceRequest.h"

/**
 * The protocol CSFA_LargeFaceListsProtocol implementation
 */
@implementation CSFA_LargeFaceLists

- (instancetype)initWithService:(CSFA_FaceClientService *)service {
    if (self = [super init]) {
        _service = service;
    }

    return self;
}

/**
 * Create an empty large face list. Up to 64 large face lists are allowed to exist in one subscription.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)createWithLargeFaceListId:(NSString *)largeFaceListId withCallback:(void(^)(AZOperationError*))callback {
    NSString* name = nil;
    NSString* userData = nil;
    [self createWithLargeFaceListId:largeFaceListId withName:name withUserData:userData withCallback:callback];
}

/**
 * Create an empty large face list. Up to 64 large face lists are allowed to exist in one subscription.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param name User defined name, maximum length is 128.
 * @param userData User specified data. Length should not exceed 16KB.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)createWithLargeFaceListId:(NSString *)largeFaceListId withName:(NSString *)name withUserData:(NSString *)userData withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (name != nil) {
        if (name.length > 128) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'name' failed rule validation, rule name: 'MaxLength', constrain value: 128"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 16384) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 16384"
                userInfo: nil];
        }
    }
    CSFA_NameAndUserDataContract *body = [CSFA_NameAndUserDataContract new];
    if (name != nil || userData != nil) {
        body.name = name;
        body.userData = userData;
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"PUT"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:[AZJsonCoder encodeObject:body]];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Retrieve a large face list's information.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param callback A block where CSFA_LargeFaceList is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)getWithLargeFaceListId:(NSString *)largeFaceListId withCallback:(void(^)(CSFA_LargeFaceList*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"GET"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_LargeFaceList class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * Update information of a large face list.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)updateWithLargeFaceListId:(NSString *)largeFaceListId withCallback:(void(^)(AZOperationError*))callback {
    NSString* name = nil;
    NSString* userData = nil;
    [self updateWithLargeFaceListId:largeFaceListId withName:name withUserData:userData withCallback:callback];
}

/**
 * Update information of a large face list.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param name User defined name, maximum length is 128.
 * @param userData User specified data. Length should not exceed 16KB.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)updateWithLargeFaceListId:(NSString *)largeFaceListId withName:(NSString *)name withUserData:(NSString *)userData withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (name != nil) {
        if (name.length > 128) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'name' failed rule validation, rule name: 'MaxLength', constrain value: 128"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 16384) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 16384"
                userInfo: nil];
        }
    }
    CSFA_NameAndUserDataContract *body = [CSFA_NameAndUserDataContract new];
    if (name != nil || userData != nil) {
        body.name = name;
        body.userData = userData;
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"PATCH"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:[AZJsonCoder encodeObject:body]];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)deleteWithLargeFaceListId:(NSString *)largeFaceListId withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"DELETE"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Retrieve the training status of a large face list (completed or ongoing).
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param callback A block where CSFA_TrainingStatus is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)getTrainingStatusWithLargeFaceListId:(NSString *)largeFaceListId withCallback:(void(^)(CSFA_TrainingStatus*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}/training"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"GET"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_TrainingStatus class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * Retrieve information about all existing large face lists. Only largeFaceListId, name and userData will be returned.
 *
 * @param callback A block where NSArray<CSFA_LargeFaceList*> is a result object and AZOperationError is nil, if the operation is successful
 */
- (void)listWithCallback:(void(^)(NSArray<CSFA_LargeFaceList*>*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"GET"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[NSArray<CSFA_LargeFaceList*> class]
                   withElementClass:[CSFA_LargeFaceList class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * Queue a large face list training task, the training task may not be started immediately.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)trainWithLargeFaceListId:(NSString *)largeFaceListId withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}/train"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"POST"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Delete an existing face from a large face list (given by a persisitedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)deleteFaceWithLargeFaceListId:(NSString *)largeFaceListId withPersistedFaceId:(NSUUID *)persistedFaceId withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (persistedFaceId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'persistedFaceId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId,@"{persistedFaceId}":persistedFaceId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"DELETE"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)getFaceWithLargeFaceListId:(NSString *)largeFaceListId withPersistedFaceId:(NSUUID *)persistedFaceId withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (persistedFaceId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'persistedFaceId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId,@"{persistedFaceId}":persistedFaceId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"GET"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_PersistedFace class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * Update a persisted face's userData field.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)updateFaceWithLargeFaceListId:(NSString *)largeFaceListId withPersistedFaceId:(NSUUID *)persistedFaceId withCallback:(void(^)(AZOperationError*))callback {
    NSString* userData = nil;
    [self updateFaceWithLargeFaceListId:largeFaceListId withPersistedFaceId:persistedFaceId withUserData:userData withCallback:callback];
}

/**
 * Update a persisted face's userData field.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
 * @param userData User-provided data attached to the face. The size limit is 1KB.
 * @param callback A block where AZOperationError is nil if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)updateFaceWithLargeFaceListId:(NSString *)largeFaceListId withPersistedFaceId:(NSUUID *)persistedFaceId withUserData:(NSString *)userData withCallback:(void(^)(AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (persistedFaceId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'persistedFaceId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 1024) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 1024"
                userInfo: nil];
        }
    }
    CSFA_UpdateFaceRequest *body = [CSFA_UpdateFaceRequest new];
    if (userData != nil) {
        body.userData = userData;
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId,@"{persistedFaceId}":persistedFaceId}
                                withQueryParams:@{}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"PATCH"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:[AZJsonCoder encodeObject:body]];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(AZOperationError* _Nullable error) {
        callback(error);
    }];
}

/**
 * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param url Publicly reachable URL of an image
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)addFaceFromUrlWithLargeFaceListId:(NSString *)largeFaceListId withUrl:(NSString *)url withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback {
    NSString* userData = nil;
    NSArray<AZInteger*>* targetFace = nil;
    [self addFaceFromUrlWithLargeFaceListId:largeFaceListId withUrl:url withUserData:userData withTargetFace:targetFace withCallback:callback];
}

/**
 * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param url Publicly reachable URL of an image
 * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
 * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)addFaceFromUrlWithLargeFaceListId:(NSString *)largeFaceListId withUrl:(NSString *)url withUserData:(NSString *)userData withTargetFace:(NSArray<AZInteger*> *)targetFace withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (url == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'url' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 1024) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 1024"
                userInfo: nil];
        }
    }
    CSFA_ImageUrl *imageUrl = [CSFA_ImageUrl new];
    imageUrl.url = url;
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}/persistedfaces"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId}
                                withQueryParams:@{@"userData":AZ_NULLABLE(userData),@"targetFace":AZ_NULLABLE(targetFace)}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"POST"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:[AZJsonCoder encodeObject:imageUrl]];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_PersistedFace class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param callback A block where NSArray<CSFA_PersistedFace*> is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)listFacesWithLargeFaceListId:(NSString *)largeFaceListId withCallback:(void(^)(NSArray<CSFA_PersistedFace*>*, AZOperationError*))callback {
    NSString* start = nil;
    AZInteger* top = nil;
    [self listFacesWithLargeFaceListId:largeFaceListId withStart:start withTop:top withCallback:callback];
}

/**
 * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param start Starting face id to return (used to list a range of faces).
 * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
 * @param callback A block where NSArray<CSFA_PersistedFace*> is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)listFacesWithLargeFaceListId:(NSString *)largeFaceListId withStart:(NSString *)start withTop:(AZInteger *)top withCallback:(void(^)(NSArray<CSFA_PersistedFace*>*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (top != nil) {
        if ([top intValue] > 1000) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'top' failed rule validation, rule name: 'InclusiveMaximum', constrain value: 1000"
                userInfo: nil];
        }
        if ([top intValue] < 1) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'top' failed rule validation, rule name: 'InclusiveMinimum', constrain value: 1"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}/persistedfaces"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId}
                                withQueryParams:@{@"start":AZ_NULLABLE(start),@"top":AZ_NULLABLE(top)}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"GET"
                                                       withHeaders:@{@"Content-Type":@"application/json; charset=utf-8"}
                                                          withBody:nil];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[NSArray<CSFA_PersistedFace*> class]
                   withElementClass:[CSFA_PersistedFace class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

/**
 * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param image An image stream.
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided
 */
- (void)addFaceFromStreamWithLargeFaceListId:(NSString *)largeFaceListId withImage:(AZStream *)image withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback {
    NSString* userData = nil;
    NSArray<AZInteger*>* targetFace = nil;
    [self addFaceFromStreamWithLargeFaceListId:largeFaceListId withImage:image withUserData:userData withTargetFace:targetFace withCallback:callback];
}

/**
 * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
 *
 * @param largeFaceListId Id referencing a particular large face list.
 * @param image An image stream.
 * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
 * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
 * @param callback A block where CSFA_PersistedFace is a result object and AZOperationError is nil, if the operation is successful
 * @throws IllegalArgumentException if a requred parameter is not provided or a rule validation has failed
 */
- (void)addFaceFromStreamWithLargeFaceListId:(NSString *)largeFaceListId withImage:(AZStream *)image withUserData:(NSString *)userData withTargetFace:(NSArray<AZInteger*> *)targetFace withCallback:(void(^)(CSFA_PersistedFace*, AZOperationError*))callback {

    if (self.service.endpoint == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'self.service.endpoint' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'largeFaceListId' is required and cannot be nil."
            userInfo: nil];
    }
    if (image == nil) {
        @throw [NSException
            exceptionWithName: @"IllegalArgumentException"
            reason: @"Parameter 'image' is required and cannot be nil."
            userInfo: nil];
    }
    if (largeFaceListId != nil) {
        if (largeFaceListId.length > 64) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'MaxLength', constrain value: 64"
                userInfo: nil];
        }
        if (![[NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-z0-9-_]+$"]evaluateWithObject:largeFaceListId]) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'largeFaceListId' failed rule validation, rule name: 'Pattern', constrain value: ^[a-z0-9-_]+$"
                userInfo: nil];
        }
    }
    if (userData != nil) {
        if (userData.length > 1024) {
            @throw [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter 'userData' failed rule validation, rule name: 'MaxLength', constrain value: 1024"
                userInfo: nil];
        }
    }
    NSString* __url = [AZRequestHelper buildUrl:self.service.DEFAULT_BASE_URL
                                       withPath:@"/largefacelists/{largeFaceListId}/persistedfaces"
                                 withPathParams:@{@"{Endpoint}":self.service.endpoint,@"{largeFaceListId}":largeFaceListId}
                                withQueryParams:@{@"userData":AZ_NULLABLE(userData),@"targetFace":AZ_NULLABLE(targetFace)}];
    AZRequestParameters* __rp = [AZRequestParameters createWithUrl:__url
                                                        withMethod:@"POST"
                                                       withHeaders:@{@"Content-Type":@"application/octet-stream"}
                                                          withBody:image];
    [__rp withSpecialHeaders:self.service.specialHeaders];
    [AZRequestHelper executeRequest:__rp
                  withResponseClass:[CSFA_PersistedFace class]
                     withErrorClass:[CSFA_APIError class]
                       withCallback:^(id _Nullable result, AZOperationError* _Nullable error) {
        callback(result, error);
    }];
}

@end
